// üìç HOME PAGE | la p√°gina principal de tu SPA debe contener:

// SearchBar: un input de b√∫squeda para encontrar razas de perros por nombre.
// Sector en el que se vea un listado de cards con los perros. Al iniciar deber√° cargar los primeros resultados obtenidos desde la ruta GET /dogs y deber√° mostrar su:
// Imagen.
// Nombre.
// Temperamentos.
// Peso.
// Cuando se le hace click a una Card deber√° redirigir al detalle de esa raza espec√≠fica.
// Botones/Opciones para filtrar por temperamentos, y por si su origen es de la API o de la base de datos (creados por nosotros desde el formulario).
// Botones/Opciones para ordenar tanto ascendentemente como descendentemente las razas de perros por orden alfab√©tico y por peso.
// Paginado: el listado de razas de perros se har√° por partes. Tu SPA debe contar con un paginado que muestre un total de 8 perros por p√°gina.
// ‚ö†Ô∏è IMPORTANTE: se deben mostrar tanto las razas de perros traidas desde la API como as√≠ tambi√©n las de la base de datos, pero NO est√° permitido almacenar en la base de datos las razas de perros de la API. Solamente se pueden guardar aquellas creadas desde el form.

import './Home.css';
import Cards from '../Cards/Cards'
import { React, useEffect, useState } from 'react';
import * as actions from '../../redux/actions';
import { useDispatch, useSelector } from 'react-redux';
import { FontAwesomeIcon as Icon } from '@fortawesome/react-fontawesome';
import { faCaretLeft, faCaretRight } from '@fortawesome/free-solid-svg-icons';

export default function Home(props) {
    const dogShown = useSelector(store => store.dogShown)
    const dispatch = useDispatch();

    useEffect(() => {
        dispatch(actions.getAllDogs())
    }, [])

    // PAGINADO: creo otro estado local que setee el nro de p√°gina inicial y que luego permita cambiarlo


    const [currentPg, setCurrentPg] = useState(0);

    const ITEMS_PER_PAGE = 7; // cu√°ntos items quiero mostrar por p√°gina -1 

    const nextHandler = () => {
        // √©ste handler va a cambiar el nro de p√°gina + 1
        let top = (dogShown.length / ITEMS_PER_PAGE)
        if (currentPg < top) setCurrentPg((currentPg) => currentPg + 1);
        else return
    };

    const prevHandler = () => {
        // √©ste handler va a cambiar el nro de p√°gina - 1
        if (currentPg >= 1) setCurrentPg((currentPg) => currentPg - 1);
        else return
    }

    return (
        <div className="home">
            <div className="prevBar" onClick={() => prevHandler()}><Icon icon={faCaretLeft} beat style={{ color: "#cba16f", }} size='2xl' /><Icon icon={faCaretLeft} beat style={{ color: "#cba16f", }} size='2xl' /><Icon icon={faCaretLeft} beat style={{ color: "#cba16f", }} size='2xl' /><Icon icon={faCaretLeft} beat style={{ color: "#cba16f", }} size='2xl' /><Icon icon={faCaretLeft} beat style={{ color: "#cba16f", }} size='2xl' /> </div>

            <div className='cards'>
                <Cards currentPg={currentPg} ITEMS_PER_PAGE={ITEMS_PER_PAGE} />
            </div>

            {/* <div className='pgHandlers'>
                <button onClick={() => prevHandler()} className='prevBtn'> prev </button>
                <span> page {currentPg + 1} from {Math.floor(dogShown.length / 15) + 1} </span>
                <button onClick={() => nextHandler()} className='nextBtn'> next </button>
            </div> */}

            <div className="nextBar" onClick={() => nextHandler()}>  <Icon icon={faCaretRight} beat style={{ color: "#cba16f", }} size='2xl' /><Icon icon={faCaretRight} beat style={{ color: "#cba16f", }} size='2xl' /><Icon icon={faCaretRight} beat style={{ color: "#cba16f", }} size='2xl' /><Icon icon={faCaretRight} beat style={{ color: "#cba16f", }} size='2xl' /><Icon icon={faCaretRight} beat style={{ color: "#cba16f", }} size='2xl' /> </div>
        </div>
    )
}

